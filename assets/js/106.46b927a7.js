(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{999:function(a,t,e){"use strict";e.r(t);var n=e(106),i=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"spring-ioc源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc源码"}},[a._v("#")]),a._v(" Spring IoC源码")]),a._v(" "),e("p",[a._v("Spring骨架脉络：")]),a._v(" "),e("ol",[e("li",[a._v("解析配置")]),a._v(" "),e("li",[a._v("定位与注册对象")]),a._v(" "),e("li",[a._v("注入对象")])]),a._v(" "),e("p",[a._v("Spring解决的关键问题：将对象之间的关系转而用配置来管理")]),a._v(" "),e("ol",[e("li",[a._v("依赖注入：依赖关系在Spring的IoC容器中管理")]),a._v(" "),e("li",[a._v("通过把对象包装在Bean中以达到管理对象和进行额外操作的目的")])]),a._v(" "),e("h2",{attrs:{id:"一、bean与beandefinition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、bean与beandefinition"}},[a._v("#")]),a._v(" 一、Bean与BeanDefinition")]),a._v(" "),e("ol",[e("li",[a._v("Bean的本质就是Java对象，只是这个对象的生命周期由容器来管理")]),a._v(" "),e("li",[a._v("不需要为了创建Bean而在原来的Java类上添加任何额外的限制")])]),a._v(" "),e("h3",{attrs:{id:"_1、beandefinition-bean定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、beandefinition-bean定义"}},[a._v("#")]),a._v(" 1、BeanDefinition--Bean定义")]),a._v(" "),e("p",[a._v("根据配置，生成用来描述Bean的BeanDefinition，常用属性（前为spring-config.xml，后为注解）：")]),a._v(" "),e("ol",[e("li",[a._v("作用范围scope(@Scope)")]),a._v(" "),e("li",[a._v("懒加载lazy-init(@Lazy)：决定Bean实例是否延迟加载")]),a._v(" "),e("li",[a._v("首选primary(@Primary)：设置为true的bean会是优先的实现类")]),a._v(" "),e("li",[a._v("factory-bean和factory-method(@Configuration和@Bean)")])]),a._v(" "),e("h4",{attrs:{id:"_1-1、容器初始化主要脉络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、容器初始化主要脉络"}},[a._v("#")]),a._v(" 1.1、容器初始化主要脉络")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://imgtu.com/i/fhn9KS",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://z3.ax1x.com/2021/08/17/fhn9KS.md.png",alt:"fhn9KS.md.png"}}),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"二、beanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、beanfactory"}},[a._v("#")]),a._v(" 二、BeanFactory")]),a._v(" "),e("h3",{attrs:{id:"_1、beanfactory和factorybean的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、beanfactory和factorybean的区别"}},[a._v("#")]),a._v(" 1、BeanFactory和FactoryBean的区别")]),a._v(" "),e("p",[a._v("BeanFactory：")]),a._v(" "),e("ol",[e("li",[a._v("SpringIoC容器的根接口")]),a._v(" "),e("li",[a._v("定义了Bean工厂最基础的特性\n"),e("ol",[e("li",[a._v("getBean(String name) / getBean(Class"),e("T",[a._v(" requiredType)")])],1),a._v(" "),e("li",[a._v("isSingleton(String name)")]),a._v(" "),e("li",[a._v("Class<?> getType(String name)")])])]),a._v(" "),e("li",[a._v("只对IoC容器中的基本行为做了定义，不关心Bean是如何创建的")])]),a._v(" "),e("p",[a._v("FactoryBean:")]),a._v(" "),e("ol",[e("li",[a._v("本质是一个Bean")]),a._v(" "),e("li",[a._v("Spring把实现FactoryBean的子类取出，调用其实现的getObject()，来生成Bean")]),a._v(" "),e("li",[a._v("声明FactoryBean的子类为Bean，spring初始化之后获得Bean却是getObject()返回类类型的Bean。\n而在获取FactoryBean对应的Bean name前面加上一个"),e("code",[a._v("&")]),a._v("（FACTORY_BEAN_PREFIX）， 才能返回FactoryBean类类型的Bean")])]),a._v(" "),e("h3",{attrs:{id:"_2、beanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、beanfactory"}},[a._v("#")]),a._v(" 2、BeanFactory")]),a._v(" "),e("p",[a._v("结构：")]),a._v(" "),e("ol",[e("li",[a._v("以BeanFactory为主的简单容器\n"),e("a",{attrs:{href:"https://imgtu.com/i/h8stLF",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://z3.ax1x.com/2021/08/29/h8stLF.md.png",alt:"h8stLF.md.png"}}),e("OutboundLink")],1)]),a._v(" "),e("li",[a._v("以ApplicationContext（应用上下文接口）为核心的高级容器\n"),e("a",{attrs:{href:"https://imgtu.com/i/h8s0iR",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://z3.ax1x.com/2021/08/29/h8s0iR.md.png",alt:"h8s0iR.md.png"}}),e("OutboundLink")],1)])]),a._v(" "),e("h4",{attrs:{id:"_2-1、listablebeanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、listablebeanfactory"}},[a._v("#")]),a._v(" 2.1、ListableBeanFactory")]),a._v(" "),e("ol",[e("li",[a._v("以列表的形式提供Bean的相关信息")]),a._v(" "),e("li",[a._v("批量列出工厂生产的实例信息")])]),a._v(" "),e("blockquote",[e("p",[a._v("实现BeanDefinitionRegistry接口，可注册BeanDefinition（registerBeanDefinition()）")])]),a._v(" "),e("h4",{attrs:{id:"_2-2、hierarchicalbeanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、hierarchicalbeanfactory"}},[a._v("#")]),a._v(" 2.2、HierarchicalBeanFactory")]),a._v(" "),e("ol",[e("li",[a._v("使得容器具备层级的关系")])]),a._v(" "),e("h4",{attrs:{id:"_2-3、autowirecapablebeanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、autowirecapablebeanfactory"}},[a._v("#")]),a._v(" 2.3、AutowireCapableBeanFactory")]),a._v(" "),e("ol",[e("li",[a._v("赋予容器自动装配Bean的能力")]),a._v(" "),e("li",[a._v("根据Bean定义装配Bean，执行前后处理器等")])]),a._v(" "),e("h4",{attrs:{id:"_2-4、applicationcontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、applicationcontext"}},[a._v("#")]),a._v(" 2.4、ApplicationContext")]),a._v(" "),e("p",[a._v("基于XML配置的经典容器")]),a._v(" "),e("ol",[e("li",[a._v("FileSystemXmlApplicationContext（文件系统）")]),a._v(" "),e("li",[a._v("ClassPathXmlApplicationContext（classpath）")]),a._v(" "),e("li",[a._v("XmlWebApplicationContext（用于Web应用程序的容器）")])]),a._v(" "),e("p",[a._v("目前比较流行的容器")]),a._v(" "),e("ol",[e("li",[a._v("AnnotationConfigApplicationContext")])]),a._v(" "),e("h4",{attrs:{id:"_2-5、configurableapplicationcontext"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、configurableapplicationcontext"}},[a._v("#")]),a._v(" 2.5、ConfigurableApplicationContext")]),a._v(" "),e("p",[a._v("提供set方法，如:")]),a._v(" "),e("ol",[e("li",[a._v("setId(String id)")]),a._v(" "),e("li",[a._v("setParent(ApplicationContext parent)")]),a._v(" "),e("li",[a._v("setEnvironment(ConfigurableEnvironment environment)")])]),a._v(" "),e("p",[a._v("核心抽象类AbstractApplicationContext实现该接口")]),a._v(" "),e("h3",{attrs:{id:"_3、abstractapplicationcontext-refresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、abstractapplicationcontext-refresh"}},[a._v("#")]),a._v(" 3、AbstractApplicationContext#refresh()")]),a._v(" "),e("ol",[e("li",[a._v("容器初始化、配置解析")]),a._v(" "),e("li",[a._v("BeanFactoryPostProcessor和BeanPostProcessor的注册和激活")]),a._v(" "),e("li",[a._v("国际化配置")]),a._v(" "),e("li",[a._v("web容器构造")])]),a._v(" "),e("ad"),a._v(" "),e("comment")],1)}),[],!1,null,null,null);t.default=i.exports}}]);