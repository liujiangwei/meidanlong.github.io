(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{967:function(a,t,i){"use strict";i.r(t);var r=i(106),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,i=a._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[i("h1",{attrs:{id:"初始化器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#初始化器"}},[a._v("#")]),a._v(" 初始化器")]),a._v(" "),i("h2",{attrs:{id:"一、介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一、介绍"}},[a._v("#")]),a._v(" 一、介绍")]),a._v(" "),i("ol",[i("li",[a._v("类名：ApplicationContextInitializer")]),a._v(" "),i("li",[a._v("介绍：Spring容器刷新之前执行的一个回调函数")]),a._v(" "),i("li",[a._v("作用：向SpringBoot容器中注册属性")]),a._v(" "),i("li",[a._v("使用：继承接口自定义实现")])]),a._v(" "),i("h2",{attrs:{id:"二、使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二、使用"}},[a._v("#")]),a._v(" 二、使用")]),a._v(" "),i("ol",[i("li",[a._v("实现ApplicationContextInitializer接口")]),a._v(" "),i("li",[a._v("调用\n"),i("ol",[i("li",[a._v("spring.factories内填写接口实现 -> org.springframework.context.ApplicationContextInitializer")]),a._v(" "),i("li",[a._v("SpringApplication类初始化后设置进去")]),a._v(" "),i("li",[a._v("application.properties内填写接口实现 -> context.initializer.classes")])])])]),a._v(" "),i("h2",{attrs:{id:"三、springfactoriesloader"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三、springfactoriesloader"}},[a._v("#")]),a._v(" 三、SpringFactoriesLoader")]),a._v(" "),i("ol",[i("li",[a._v("框架内部使用的通用工厂加载机制")]),a._v(" "),i("li",[a._v("从classpath下多个jar包特定的位置读取文件并初始化类")]),a._v(" "),i("li",[a._v("文件内容必须是kv形式，即properties类型")]),a._v(" "),i("li",[a._v('key是全限定名（抽象类|接口）、value是实现，多个实现用","分隔')])]),a._v(" "),i("h3",{attrs:{id:"loadfactories流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#loadfactories流程"}},[a._v("#")]),a._v(" loadFactories流程")]),a._v(" "),i("ol",[i("li",[a._v("查找缓存是否存在")]),a._v(" "),i("li",[a._v("读取指定资源文件")]),a._v(" "),i("li",[a._v("构建properties对象")]),a._v(" "),i("li",[a._v("获取指定key对应value")]),a._v(" "),i("li",[a._v("逗号分割value")]),a._v(" "),i("li",[a._v("保存结果到缓存")]),a._v(" "),i("li",[a._v("依次实力话结果对象")]),a._v(" "),i("li",[a._v("对结果对象进行排序")]),a._v(" "),i("li",[a._v("返回结果")])]),a._v(" "),i("h2",{attrs:{id:"四、applicationcontextinitializer"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#四、applicationcontextinitializer"}},[a._v("#")]),a._v(" 四、ApplicationContextInitializer")]),a._v(" "),i("ol",[i("li",[a._v("上下文刷新即refresh方法前调用")]),a._v(" "),i("li",[a._v("用来编码设置一些属性变量，通常用在web环境中")]),a._v(" "),i("li",[a._v("可以通过Order接口进行排序")])]),a._v(" "),i("h3",{attrs:{id:"调用流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#调用流程"}},[a._v("#")]),a._v(" 调用流程")]),a._v(" "),i("ol",[i("li",[a._v("run()框架启动")]),a._v(" "),i("li",[a._v("prepareContext()上下文准备之前")]),a._v(" "),i("li",[a._v("applyInitializers()调用系统初始化器")]),a._v(" "),i("li",[a._v("遍历调用初始化器")])]),a._v(" "),i("h3",{attrs:{id:"实现原理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[a._v("#")]),a._v(" 实现原理")]),a._v(" "),i("ol",[i("li",[a._v("定义在spring.factories文件中被SpringFactoriesLoader发现注册")]),a._v(" "),i("li",[a._v("SpringApplication初始化完毕后手动添加")]),a._v(" "),i("li",[a._v("定义成环境变量被DelegatingApplicationContextInitializer（Order = 0）发现注册")])]),a._v(" "),i("h2",{attrs:{id:"五、问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#五、问题"}},[a._v("#")]),a._v(" 五、问题")]),a._v(" "),i("h3",{attrs:{id:"_1、介绍下springfactoriesloader"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍下springfactoriesloader"}},[a._v("#")]),a._v(" 1、介绍下SpringFactoriesLoader？")]),a._v(" "),i("h3",{attrs:{id:"_2、springfactoriesloader如何加载工厂类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2、springfactoriesloader如何加载工厂类"}},[a._v("#")]),a._v(" 2、SpringFactoriesLoader如何加载工厂类？")]),a._v(" "),i("h3",{attrs:{id:"_3、系统初始化器的作用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3、系统初始化器的作用"}},[a._v("#")]),a._v(" 3、系统初始化器的作用？")]),a._v(" "),i("ad"),a._v(" "),i("comment")],1)}),[],!1,null,null,null);t.default=e.exports}}]);