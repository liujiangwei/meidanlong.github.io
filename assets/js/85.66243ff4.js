(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{973:function(t,a,s){"use strict";s.r(a);var e=s(106),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"从reactive到webflux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从reactive到webflux"}},[t._v("#")]),t._v(" 从Reactive到WebFlux")]),t._v(" "),s("h2",{attrs:{id:"一-温故"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-温故"}},[t._v("#")]),t._v(" 一. 温故")]),t._v(" "),s("p",[t._v("常用的几种模式：")]),t._v(" "),s("ol",[s("li",[t._v("Reactor -> 响应式编程 -> 同步非阻塞")]),t._v(" "),s("li",[t._v("Proactor模式 -> 异步非阻塞")]),t._v(" "),s("li",[t._v("Observer -> 观察者模式 -> 事件通知的模式")]),t._v(" "),s("li",[t._v("Iterator -> 迭代器模式")]),t._v(" "),s("li",[t._v("Java并发模型")])]),t._v(" "),s("h2",{attrs:{id:"二-理解reactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-理解reactive"}},[t._v("#")]),t._v(" 二. 理解Reactive")]),t._v(" "),s("h3",{attrs:{id:"_1-实现框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现框架"}},[t._v("#")]),t._v(" 1. 实现框架")]),t._v(" "),s("ul",[s("li",[t._v("RxJava：Reactive Extensions")]),t._v(" "),s("li",[t._v("Reactor：Spring WebFlux Reactive类库")]),t._v(" "),s("li",[t._v("Flow API：Java 9 Flow API实现")])]),t._v(" "),s("h3",{attrs:{id:"_2-理解阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解阻塞"}},[t._v("#")]),t._v(" 2. 理解阻塞")]),t._v(" "),s("p",[t._v("官网观点归纳：")]),t._v(" "),s("ul",[s("li",[t._v("阻塞导致性能瓶颈和资源浪费")]),t._v(" "),s("li",[t._v("增加线程会引起资源竞争和并发相关问题")]),t._v(" "),s("li",[t._v("并行的方式不是银弹")])]),t._v(" "),s("p",[t._v("举个例子："),s("br")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2020/01/15/lLvra8.md.png",alt:"90-1"}})]),t._v(" "),s("p",[t._v("结论："),s("br"),t._v("\n由于加载过程串行执行的关系，导致消耗实现线性累加。串行执行即Blocking模式")]),t._v(" "),s("h3",{attrs:{id:"_3-理解并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-理解并行"}},[t._v("#")]),t._v(" 3. 理解并行")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2020/01/15/lLvfrq.md.png",alt:"90-2"}})]),t._v(" "),s("p",[t._v("结论： "),s("br"),t._v("\n相比阻塞执行性能和资源利用率都得到了提升，消耗时间取最大者")]),t._v(" "),s("h3",{attrs:{id:"_4-但是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-但是"}},[t._v("#")]),t._v(" 4. 但是")]),t._v(" "),s("p",[t._v("Reactor认为异步不一定能够救赎，观点归纳如下：")]),t._v(" "),s("ul",[s("li",[t._v("Callbacks是解决非阻塞的方案，然而他们之间很难组合，并且快速地将代码引导至“Callback Hell”的不归路")]),t._v(" "),s("li",[t._v("Futures相对于Callbacks好一点，不过还是无法组合，不过"),s("code",[t._v("CompletableFuture")]),t._v("能够提升这方面的不足")])]),t._v(" "),s("h4",{attrs:{id:"_4-1-什么是callback-hell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是callback-hell"}},[t._v("#")]),t._v(" 4.1 什么是Callback Hell")]),t._v(" "),s("p",[t._v("当监听的维度增多时，Callback 实现也随之增多。同时，事件/监听者模式的并发模型可为同步或异步")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("Spring 事件/监听器（同步/异步）：\n"),s("ul",[s("li",[t._v("事件："),s("code",[t._v("ApplicationEvent")])]),t._v(" "),s("li",[t._v("事件监听器："),s("code",[t._v("ApplicationListener")])]),t._v(" "),s("li",[t._v("事件广播器："),s("code",[t._v("ApplicationEventMulticaster")])]),t._v(" "),s("li",[t._v("事件发布器："),s("code",[t._v("ApplicationEventPublisher")])])])]),t._v(" "),s("li",[t._v("Servlet 事件/监听器 ：\n"),s("ul",[s("li",[t._v("同步\n"),s("ul",[s("li",[t._v("事件："),s("code",[t._v("ServletContextEvent")])]),t._v(" "),s("li",[t._v("事件监听器："),s("code",[t._v("ServletContextListener")])])])]),t._v(" "),s("li",[t._v("异步\n"),s("ul",[s("li",[t._v("事件："),s("code",[t._v("AsyncEvent")])]),t._v(" "),s("li",[t._v("事件监听器："),s("code",[t._v("AsyncListener")])])])])])])])]),t._v(" "),s("h4",{attrs:{id:"_4-2-理解future阻塞问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-理解future阻塞问题"}},[t._v("#")]),t._v(" 4.2 理解Future阻塞问题")]),t._v(" "),s("p",[t._v("结论："),s("br"),t._v(" "),s("code",[t._v("Future#get()")]),t._v("方法不得不等待任务执行完成。如果多个任务提交后，返回的多个Future逐一调用get()方法时，将会依次 blocking，任务的执行从并行变为串行")]),t._v(" "),s("h4",{attrs:{id:"_4-3-理解future链式问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-理解future链式问题"}},[t._v("#")]),t._v(" 4.3 理解Future链式问题")]),t._v(" "),s("p",[t._v("由于Future无法实现异步执行结果链式处理，尽管"),s("code",[t._v("FutureBlockingDataLoader")]),t._v("能够解决方法数据依赖以及顺序执行的问题，不过它将并行执行带回了阻塞（串行）执行。"),s("br"),t._v("\n所以，它不是一个理想实现。不过"),s("code",[t._v("CompletableFuture")]),t._v("可以帮助提升Future的限制")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doLoad")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadConfigurations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenRun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadUsers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenRun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadOrders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("whenComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" throwable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 完成时回调")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"加载完成"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                \n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                \n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待完成    ")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("代码会在非主线程中执行，并且是在同一个线程中链式执行，所以对于主线程而言这是一个异步非阻塞的程序"),s("br")]),t._v(" "),s("p",[t._v("我们的时序图可以演化成这个样子↓"),s("br"),t._v(" "),s("img",{attrs:{src:"https://s2.ax1x.com/2020/01/15/lLvIaT.md.png",alt:"90-3"}})]),t._v(" "),s("h4",{attrs:{id:"_4-4-reactive-streams-jvm-认为异步系统和资源消费需要特殊处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-reactive-streams-jvm-认为异步系统和资源消费需要特殊处理"}},[t._v("#")]),t._v(" 4.4 Reactive Streams JVM 认为异步系统和资源消费需要特殊处理")]),t._v(" "),s("p",[t._v("官网观点归纳：")]),t._v(" "),s("ul",[s("li",[t._v("流式数据容量难以预判")]),t._v(" "),s("li",[t._v("异步编程复杂")]),t._v(" "),s("li",[t._v("数据源和消费端之间资源消费难以平衡")])]),t._v(" "),s("ad"),t._v(" "),s("comment")],1)}),[],!1,null,null,null);a.default=n.exports}}]);