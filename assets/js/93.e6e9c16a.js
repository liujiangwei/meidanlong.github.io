(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{979:function(e,t,s){"use strict";s.r(t);var r=s(106),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"第十一章-spring-mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十一章-spring-mvc"}},[e._v("#")]),e._v(" 第十一章：Spring MVC")]),e._v(" "),s("h2",{attrs:{id:"一-spring-mvc快速体验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-spring-mvc快速体验"}},[e._v("#")]),e._v(" 一. Spring MVC快速体验")]),e._v(" "),s("h3",{attrs:{id:"_1-配置web-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置web-xml"}},[e._v("#")]),e._v(" 1. 配置web.xml")]),e._v(" "),s("p",[e._v("Spring MVC之所以必须要配置web.xml,其实最关键的是要配置两个地方")]),e._v(" "),s("h4",{attrs:{id:"_1-1-contextconfiglocation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-contextconfiglocation"}},[e._v("#")]),e._v(" 1.1 contextConfigLocation")]),e._v(" "),s("p",[e._v("这个参数就是使Web与Spring的配置文件相结合的一个关键配置")]),e._v(" "),s("h4",{attrs:{id:"_1-2-dispatcherservlet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-dispatcherservlet"}},[e._v("#")]),e._v(" 1.2 DispatcherServlet")]),e._v(" "),s("p",[e._v("包含了Spring MVC的请求逻辑，Spring使用此类拦截Web请求并 进行相应的逻辑处理")]),e._v(" "),s("h3",{attrs:{id:"_2-配置applicationcontext-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置applicationcontext-xml"}},[e._v("#")]),e._v(" 2. 配置applicationContext.xml")]),e._v(" "),s("p",[e._v("主要声明"),s("code",[e._v("IntemalResourceViewResolver")]),e._v("对应的bean")]),e._v(" "),s("h4",{attrs:{id:"_2-1-intemalresourceviewresolver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-intemalresourceviewresolver"}},[e._v("#")]),e._v(" 2.1 IntemalResourceViewResolver")]),e._v(" "),s("p",[e._v("一个辅助bean,会在"),s("code",[e._v("ModelAndView")]),e._v("返回的视图名前加上 prefix 指定的前缀，再在最后加上suffix指定的后缀。"),s("br"),e._v("\n例如：由于XXController返回的ModelAndView中 的视图名是testview,故该视图解析器将在/WEB-INF/jsp/testview.jsp处查找视图")]),e._v(" "),s("h3",{attrs:{id:"_3-创建model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建model"}},[e._v("#")]),e._v(" 3. 创建model")]),e._v(" "),s("h3",{attrs:{id:"_4-创建controller"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建controller"}},[e._v("#")]),e._v(" 4. 创建controller")]),e._v(" "),s("p",[e._v("返回"),s("code",[e._v("ModelAndView")]),e._v("类型的实例，构造方法对应三个参数如下：")]),e._v(" "),s("ul",[s("li",[e._v("视图组件的逻辑名称。这里jsp的逻辑名称是userlist,视图解析器会使用该名称查找实际的View对象。")]),e._v(" "),s("li",[e._v("传递给视图的"),s("code",[e._v("model")]),e._v("对象的"),s("strong",[e._v("名称")]),e._v("。")]),e._v(" "),s("li",[e._v("传递给视图的模型对象的"),s("strong",[e._v("值")])])]),e._v(" "),s("h3",{attrs:{id:"_5-创建视图文件userlist-jsp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-创建视图文件userlist-jsp"}},[e._v("#")]),e._v(" 5. 创建视图文件userlist.jsp")]),e._v(" "),s("h3",{attrs:{id:"_6-创建servlet配置文件-spring-servlet-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-创建servlet配置文件-spring-servlet-xml"}},[e._v("#")]),e._v(" 6. 创建Servlet配置文件 Spring-servlet.xml")]),e._v(" "),s("ul",[s("li",[e._v("在SimpleUrlHandlerMapping的属性中，设置页面和Controller的对应关系")]),e._v(" "),s("li",[e._v("spring MVC是基于Servlet的实现，所以在Web启动的时候，服务器会首先尝试加载对应于Servlet的配置文件。"),s("br"),e._v("\n而为了让项目更加模块化，通常我们将Web部分的配置都存放于此配置文件中。")])]),e._v(" "),s("h2",{attrs:{id:"二-spring-mvc功能实现分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-spring-mvc功能实现分析"}},[e._v("#")]),e._v(" 二. Spring MVC功能实现分析")]),e._v(" "),s("h3",{attrs:{id:"_1-分析web-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-分析web-xml"}},[e._v("#")]),e._v(" 1. 分析web.xml")]),e._v(" "),s("h4",{attrs:{id:"_1-1-contextloaderlistener"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-contextloaderlistener"}},[e._v("#")]),e._v(" 1.1 ContextLoaderListener")]),e._v(" "),s("p",[s("strong",[e._v("作用：")]),e._v(" "),s("br")]),e._v(" "),s("ol",[s("li",[e._v("启动Web容器时，自动装配"),s("code",[e._v("ApplicationContext")]),e._v("的配置信息")]),e._v(" "),s("li",[e._v("实现"),s("code",[e._v("ServletContextListener")]),e._v("接口，初始化"),s("code",[e._v("WebApplicationContext")]),e._v("实例并存放至"),s("code",[e._v("ServletContext")]),e._v("中\n"),s("ul",[s("li",[e._v("在web.xml配置这个监听器，启动容器时， 就会默认执行它实现的方法")]),e._v(" "),s("li",[e._v("使用"),s("code",[e._v("ServletContextListener")]),e._v("接口，开发者能够在为客户端请求提 供服务之前向"),s("code",[e._v("ServletContext")]),e._v("中添加任意的对象")]),e._v(" "),s("li",[e._v("这个对象在"),s("code",[e._v("ServletContext")]),e._v("启动的时候被初始化，然后在"),s("code",[e._v("ServletContext")]),e._v("整个运行期间都是可见的")]),e._v(" "),s("li",[e._v("每一个Web应用都有一个"),s("code",[e._v("ServletContext")]),e._v("与之相关联，"),s("code",[e._v("ServletContext")]),e._v("对象在应用启动时被创建，在应用关闭的时候被销毁，"),s("code",[e._v("ServletContext")]),e._v("在全局范围内有效")])])])]),e._v(" "),s("hr"),e._v(" "),s("div",{staticClass:"language-md line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[e._v("(1)前端控制器DispatcherServlet（配置即可）\n\n功能:中央处理器,接收请求,自己不做任何处理,而是将请求发送给其他组件进行处理。DispatcherServlet 是整个流程的控制中心。\n\n(2)处理器映射器HandlerMapping(配置即可)\n\n功能:根据DispatcherServlet发送的url请求路径查找Handler\n\n常见的处理器映射器:BeanNameUrlHandlerMapping,SimpleUrlHandlerMapping,\n\nControllerClassNameHandlerMapping,DefaultAnnotationHandlerMapping(不建议使用)\n\n(3)处理器适配器HandlerAdapter（配置即可）\n\n功能:按照特定规则（HandlerAdapter要求的规则）去执行Handler。\n\n通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展多个适配器对更多类型的处理器进行执行。\n\n常见的处理器适配器:HttpRequestHandlerAdapter，SimpleControllerHandlerAdapter，AnnotationMethodHandlerAdapter\n\n(4)处理器Handler即Controller(程序猿编写)\n\n功能:编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler。\n\n(5)视图解析器ViewReslover(配置即可)\n\n功能:进行视图解析，根据逻辑视图名解析成真正的视图。\n\nViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。\n\nspringmvc框架提供了多种View视图类型,如:jstlView、freemarkerView、pdfView...\n\n(6)视图View(程序猿编写)\n\nView是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf...）\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br")])]),s("ad"),e._v(" "),s("comment")],1)}),[],!1,null,null,null);t.default=a.exports}}]);